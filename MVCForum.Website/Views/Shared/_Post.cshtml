@using MvcForum.Core.ExtensionMethods
@using MvcForum.Web.Application.ExtensionMethods
@using MvcForum.Web.ViewModels.Post
@model PostViewModel
@using MvcForum.Web.ViewModels.Shared

@{
    var postId = Model.Post.Id;
    var loggedOnUserId = Html.CurrentMember() != null ? Html.CurrentMember().Id : Guid.Empty;
    var isAdmin = User.IsInRole(Constants.AdminRoleName);
    var downVotes = Model.Votes.Where(x => x.Amount < 0).ToList();
    var upVotes = Model.Votes.Where(x => x.Amount > 0).ToList();
}
<div class="c-grid-block">
    <a id="@postId"></a>
    <div class="c-grid-block_item l-col-12">
        <div class="c-card c-card--comment u-border-left-theme-8">
            <div class="c-card_content">
                <div class="c-card_header">
                    <div class="c-card_header-img">
                        <div class="c-avatar c-avatar--small">
                            <div class="c-avatar_fallback">
                                <p class="c-avatar_initials u-text-bold" aria-hidden="true">@Html.DisplayFor(x => Model.Post.User.Initials)</p>
                            </div>
                            @if (!string.IsNullOrEmpty(Model.Post.User.Avatar)) {

                                <img role="presentation" class="c-avatar_image" src="@Model.Post.User.MemberImage(ForumConfiguration.Instance.GravatarPostSize)" alt="Avatar image of member: @Model.Post.User.FirstName @Model.Post.User.Surname">

                            }
                        </div>
                    </div>
                    <div class="c-card_header-content u-text-theme-7">
                        <p class="u-text-small u-text-bold u-has-subheading u-text-theme-8">
                            <a href="@Html.Raw(Model.Post.User.NiceUrl)">@Model.Post.User.FirstName @Model.Post.User.Surname</a>
                        </p>
                        <p class="u-text-small u-text-bold">
                            @DatesUi.GetPrettyDate(Model.Post.DateCreated.ToString())
                        </p>
                    </div>
                </div>
                <div class="c-card_description">
                    @Html.Raw(Model.Post.PostContent.ConvertPostContent())
                </div>

                @{Html.RenderPartial("_PostFooter", Model);}

                @if (Model.Post.ThreadId == null && !Model.Post.IsTopicStarter) {
                    if (Model.IsFocusThread) {
                        <div id="replies-@Model.Post.Id" class="c-card_replies-list">
                            @* If thread is focus thread, all replies must be shown *@
                            @{
                                Html.RenderAction("GetAllRepliesForThread", "Topic", new { thread = Model.Post });
                            }

                        </div>
                    } else {
                        if (Model.LatestReply != null) {
                            <div id="replies-@Model.Post.Id" class="c-card_replies-list">

                                @* This doesn't need hiding when js is disabled, skip the first one in noscript method *@
                                @{Html.RenderPartial("_PostReply", Model.LatestReply);}

                                <noscript>
                                    @{Html.RenderAction("GetNoScriptRepliesForThread", "Topic", new { thread = Model.Post, p = Model.PageIndex });}
                                </noscript>
                            </div>
                        }
                        if (Model.Replies.HasNextPage) {
                            <button data-target-id="replies-@Model.Post.Id"
                                    data-request-id="@Model.Post.Id"
                                    data-endpoint-type="getThreadComments"
                                    data-maxim-requests="@(Model.Replies.TotalPages)"
                                    data-request-index="@Model.Replies.PageIndex"
                                    class="u-text-bold u-text-small c-link js-loadmore u-no-js-hidden">
                                Load more replies
                            </button>
                        }
                    }
                }
            </div>
        </div>
    </div>
</div>


@{/*
  <div class="post solution-@Model.Post.IsSolution.ToString().ToLower() post-@postId" data-id="@postId">

      <div class="rowcreater hidden-xs">
          <a id="comment-@postId"></a>
          <a href="@Model.Post.User.NiceUrl">
              @if (!string.IsNullOrEmpty(Model.Post.User.Avatar))
              {
                  <span class="c-site-header-nav_root-nav-image">
                      <img src="@Model.Post.User.MemberImage(ForumConfiguration.Instance.GravatarPostSize)" alt="@Model.Post.User.UserName">
                  </span>
              }
              else
              {
                  @* TODO [FED]: The initials of the user (valiue in img tag alt) should be displayed if no image *@
                  @Html.DisplayFor(x => Model.Post.User.Initials)
              }
          </a>
          @if (Model.Post.User.Roles.Any(x => x.RoleName.Contains(Constants.AdminRoleName)))
          {
              <span class="label label-default">
                  @Html.Lang("Admin")
              </span>
          }
          @if (Model.MemberIsOnline)
          {
              <span class="label label-success">
                  @Html.Lang("Post.MemberIsOnline")
              </span>
          }
          @if (Model.IsTrustedUser)
          {
              <span class="label label-success">
                  @Html.Lang("Post.IsTrustedUser")
              </span>
          }
      </div>

      <div class="rowdetails clearfix">


          @if (Html.CurrentMember() != null && !Model.MinimalPost)
          {
              <div class="postadmin">
                  <button class="postoptions btn-mvc btn-mvc-fullwidth">@Html.LanguageString("Post.Options")</button>
                  <ul class="clearfix postadminlist">
                      <li>
                          <a class="btn-mvc btn-mvc-small btn-mvc-fullwidth" href="?quote=@Model.Post.Id#createpost">
                              @Html.LanguageString("Post.Quote")
                          </a>
                      </li>

                      @if (Model.Post.User.Id != loggedOnUserId && loggedOnUserId != Guid.Empty && Html.Settings().EnableSpamReporting)
                      {
                          <li>
                              <a class="btn-mvc btn-mvc-small btn-mvc-fullwidth" href="@Url.Action("Report", "Post", new { id = Model.Post.Id })">
                                  @Html.LanguageString("Post.Report")
                              </a>
                          </li>
                      }

                      @if (Model.Post.User.Id == loggedOnUserId || Model.Permissions[ForumConfiguration.Instance.PermissionDeletePosts].IsTicked)
                      {
                          <li>
                              @using (Html.BeginForm("DeletePost", "Post", FormMethod.Post, new { @class = "form-login" }))
                              {
                                  <button class="btn-mvc btn-mvc-small btn-mvc-fullwidth" onclick="return confirm('@(Html.LanguageString("Post.DeleteConfirmation"))')" type="submit">@Html.LanguageString("Post.Delete")</button>
                                  @Html.Hidden("id", Model.Post.Id)
                              }
                              @*<a class="btn-mvc btn-mvc-small btn-mvc-fullwidth" onclick="return confirm('@(Html.LanguageString("Post.DeleteConfirmation"))')" href="@Url.Action("DeletePost", "Post", new {id = Model.Post.Id})">
                                  @Html.LanguageString("Post.Delete")
                              </a>*@
                          </li>
                      }

                      @if (Model.Post.User.Id == loggedOnUserId || Model.Permissions[ForumConfiguration.Instance.PermissionEditPosts].IsTicked)
                      {
                          <li>
                              <a class="btn-mvc btn-mvc-small btn-mvc-fullwidth" href="@Url.Action("EditPostTopic", "Topic", new { id = Model.Post.Id })">
                                  @Html.LanguageString("Post.Edit")
                              </a>
                          </li>
                      }

                      @if (!Model.Post.IsTopicStarter && Model.Permissions[ForumConfiguration.Instance.PermissionEditPosts].IsTicked)
                      {
                          <li>
                              <a class="btn-mvc btn-mvc-small btn-mvc-fullwidth" href="@Url.Action("MovePost", "Post", new { id = Model.Post.Id })">
                                  @Html.LanguageString("Post.Move")
                              </a>
                          </li>
                      }

                      @if ((Model.Post.User.Id == loggedOnUserId && Model.Post.User.DisableFileUploads != true || User.IsInRole(Constants.AdminRoleName)) && Model.Permissions[ForumConfiguration.Instance.PermissionAttachFiles].IsTicked)
                      {
                          <li>
                              <a class="btn-mvc btn-mvc-small btn-mvc-fullwidth postshowattach" href="#">
                                  @Html.LanguageString("Post.Attach")
                              </a>
                          </li>
                      }
                  </ul>
              </div>
          }


          <div class="postdetails@(Html.CurrentMember() == null ? " postdetails-guest" : "")">
              <div class="postbodytop">
                  @if (Model.ShowTopicName)
                  {
                      <h3><a href="@Model.ParentTopic.NiceUrl">@Model.ParentTopic.Name</a></h3>
                  }
                  <a class="postmember-@postId" href="@Html.Raw(Model.Post.User.NiceUrl)">@Html.Raw(Model.Post.User.UserName)</a>
                  @Html.LanguageString("Post.PostedThis")
                  @DatesUi.GetPrettyDate(Model.Post.DateCreated.ToString())
                  @if (isAdmin && !string.IsNullOrEmpty(Model.Post.IpAddress))
                  {
                      <text> - @Model.Post.IpAddress</text>
                  }
                  <span class="hidden-xs">
                      @if (Html.Settings().DisplayEditedBy && Model.Post.DateEdited > Model.Post.DateCreated)
                      {
                          if (Model.Permissions[ForumConfiguration.Instance.PermissionEditPosts].IsTicked)
                          {
                              <text> - <a href="@Url.Action("GetPostEditHistory", "Post", new {id = Model.Post.Id})" class="showpostedithistory" data-name="@Html.Lang("PostEdit.Panel.Name")">@Html.LanguageString("Post.LastEdited")  @DatesUi.GetPrettyDate(Model.Post.DateEdited.ToString())</a></text>
                          }
                          else
                          {
                              <text> - @Html.LanguageString("Post.LastEdited")  @DatesUi.GetPrettyDate(Model.Post.DateEdited.ToString())</text>
                          }
                      }
                  </span>
              </div>

              <div id="postcontent-@postId" class="postcontent">
                  <p>@Html.Raw(Model.Post.PostContent.ConvertPostContent())</p>

                  @if (Html.Settings().EnableSignatures && !string.IsNullOrEmpty(Model.Post.User.Signature))
                  {
                      <div class="userpostsignature">@Html.Raw(Model.Post.User.Signature.ConvertPostContent())</div>
                  }
              </div>

              @if (!Model.MinimalPost)
              {
                  <div class="postsocial">
                      <ul>
                          <li class="permalink">
                              <a href="@Html.Raw(Model.PermaLink)">
                                  #@Html.Lang("Post.Permalink")
                              </a>
                          </li>
                          <li class="votelink-container">
                              @{ Html.RenderPartial("_SVGIcon", new SVGIconViewModel("icon-thumbs-up", "c-ui-icon")); }
                              @if (Html.Settings().EnablePoints)
                              {
                                  <span class="count">@upVotes.Count.KiloFormat()</span>
                              }
                              @if (Model.AllowedToVote)
                              {
                                  <a class="votelink" data-id="@postId" data-votetype="up" data-votetext="@Html.LanguageString("Post.VoteUp")" data-votedtext="@Html.LanguageString("Post.VotedUp")" data-hasvoted="@Model.HasVotedUp.ToString().ToLower()" style="@Html.Raw(Model.HasVotedDown ? "display:none;" : "")">
                                      @(Model.HasVotedUp ? Html.LanguageString("Post.VotedUp") : Html.LanguageString("Post.VoteUp"))
                                  </a>
                              }
                          </li>

                          @if (!Html.Settings().DisableDislikeButton)
                          {
                              <li class="votelink-container">
                                  @{ Html.RenderPartial("_SVGIcon", new SVGIconViewModel("icon-down", "c-ui-icon")); }
                                  @if (Html.Settings().EnablePoints)
                                  {
                                      <span class="count">@downVotes.Count.KiloFormat()</span>
                                  }
                                  @if (Model.AllowedToVote)
                                  {
                                      <a class="votelink" data-id="@postId" data-votetype="down" data-votetext="@Html.LanguageString("Post.VoteDown")" data-votedtext="@Html.LanguageString("Post.VotedDown")" data-hasvoted="@Model.HasVotedDown.ToString().ToLower()" style="@Html.Raw(Model.HasVotedUp ? "display:none;" : "")">
                                          @(Model.HasVotedDown ? Html.LanguageString("Post.VotedDown") : Html.LanguageString("Post.VoteDown"))
                                      </a>
                                  }
                              </li>
                          }
                          <li class="favourite-container">
                              @if (Model.MemberHasFavourited) {
                                  { Html.RenderPartial("_SVGIcon", new SVGIconViewModel("icon-star", "c-ui-icon c-ui-icon--yellow" )); }
                              } else {
                                  { Html.RenderPartial("_SVGIcon", new SVGIconViewModel("icon-star", "c-ui-icon " )); }
                              }
                              else
                              {
                                  { Html.RenderPartial("_SVGIcon", new SVGIconViewModel("icon-star", "c-ui-icon ")); }
                              }
                              <span class="count">@Model.Favourites.Count</span>
                              @if (Html.CurrentMember() != null && Model.Post.User.Id != loggedOnUserId)
                              {
                                  <a class="favourite" data-id="@postId" data-addremove="@(Model.MemberHasFavourited ? "remove" : "add")">
                                      @(Model.MemberHasFavourited ? Html.Lang("Post.Favourited") : Html.Lang("Post.Favourite"))
                                  </a>
                              }
                          </li>

                          @if (Html.Settings().EnableMarkAsSolution)
                          {
                              if (Model.ParentTopic.Solved && Model.Post.IsSolution)
                              {
                                  <li>
                                      @{ Html.RenderPartial("_SVGIcon", new SVGIconViewModel("icon-tick", "c-ui-icon c-ui-icon--green")); }
                                  </li>
                              }
                              else if (!Model.ParentTopic.Solved && !Model.Post.IsTopicStarter && Html.CurrentMember() != null && (Model.ParentTopic.User.Id == loggedOnUserId || User.IsInRole(Constants.AdminRoleName)))
                              {
                                  <li>
                                      @{ Html.RenderPartial("_SVGIcon", new SVGIconViewModel("icon-tick", "c-ui-icon solution-icon")); }
                                      <a class="solutionlink" data-id="@postId">
                                          @Html.LanguageString("Post.IsSolution")
                                      </a>
                                  </li>
                              }
                          }

                          @if (Html.CurrentMember() != null && Model.Post.User.Id != loggedOnUserId && !Model.Post.IsTopicStarter)
                          {
                              <li>
                                  @{ Html.RenderPartial("_SVGIcon", new SVGIconViewModel("icon-left", "c-ui-icon")); }
                                  <a class="replytolink" href="?reply=@Model.Post.Id#createpost">
                                      @Html.LanguageString("Post.Reply")
                                  </a>
                              </li>
                          }
                      </ul>

                  </div>
              }

              @if (Model.Post.IsTopicStarter && Model.ParentTopic.Tags.Any())
              {
                  <div class="posttags tagsinput">
                      @foreach (var tag in Model.ParentTopic.Tags)
                      {
                          <span class="tag"><span><a href="@Html.Raw(tag.NiceUrl)">@Html.Raw(tag.Tag)</a></span></span>
                      }
                  </div>
              }

              @if (Model.Post.Files != null && Model.Post.Files.Any())
              {

                  <div class="postuploadedfilesholder clearfix">
                      <p>@Html.Lang("Post.AttachedFiles")</p>
                      <ul>
                          @foreach (var file in Model.Post.Files.OrderByDescending(o => o.DateCreated))
                          {
                              <li>
                                  <a class="fileupload" href="@Url.Action("Download", "File", new { id = file.Id})">
                                      @**
                                      @if (AppHelpers.FileIsImage(file.FilePath))
                                      {
                                          Html.RenderPartial("_SVGIcon", new SVGIconViewModel("icon-document", "c-ui-icon"));
                                      }
                                      else
                                      {
                                          Html.RenderPartial("_SVGIcon", new SVGIconViewModel("icon-document", "c-ui-icon"));
                                      }
                                      **@
                                      @file.Filename
                                  </a>
                                  @if (Model.Post.User.Id == loggedOnUserId || User.IsInRole(Constants.AdminRoleName))
                                  {
                                      <a href="@Url.Action("DeleteUploadedFile", "Upload", new { file.Id })" class="deleteupload" title="@Html.LanguageString("Post.Delete")">
                                          @{Html.RenderPartial("_SVGIcon", new SVGIconViewModel("icon-close", "c-ui-icon"));}
                                      </a>
                                  }
                              </li>
                          }
                      </ul>
                  </div>
              }

              @if (Model.Permissions[ForumConfiguration.Instance.PermissionAttachFiles].IsTicked && Model.Post.User.DisableFileUploads != true)
              {
                  <div class="postuploadholder">
                      @using (Html.BeginForm("UploadPostFiles", "Upload", FormMethod.Post, new { enctype = "multipart/form-data" }))
                      {
                          <div class="input-group input-group-sm">

                              <span class="input-group-btn">
                                  <span class="btn btn-default btn-file">
                                      @Html.LanguageString("Post.Browse") <input type="file" name="files" id="files" value="" multiple="multiple">
                                  </span>
                              </span>
                              @* <input type="text" class="form-control" readonly=""> *@
                          </div>
                          <p>
                              <input type="submit" value="@Html.LanguageString("Post.Upload")" class="btn-mvc btn-mvc-small postuploadbutton" />
                              <span style="display: none;" class="ajaxspinner" title="@Html.LanguageString("Post.PleaseWait")">@Html.LanguageString("Post.PleaseWait")</span>
                              <input type="hidden" name="uploadPostId" id="uploadPostId" value="@Model.Post.Id" />
                          </p>
                      }
                  </div>
              }

              @Html.Partial("_PostLikedBy", new PostLikedByViewModel { Post = Model.Post, Votes = upVotes })

          </div>

          @if (Model.Post.ThreadId == null && !Model.Post.IsTopicStarter)
          {
              <div id="replies-@Model.Post.Id" style="margin-left: 70px">
                  @if (Model.LatestReply != null)
                  {
                      @* This needs hiding when js is disabled *@
                      Html.RenderAction("GetPost", "Post", Model.LatestReply);
                  }
                  @foreach (var threadReply in Model.Replies)
                  {
                      Html.RenderAction("GetPost", "Post", threadReply);
                  }

                  <noscript>
                      @{Html.RenderAction("GetNoScriptRepliesForThread", "Topic", Model.Post);
                      }
                  </noscript>
              </div>
              <a data-target-id="replies-@Model.Post.Id"
                 data-request-id="@Model.Post.Id"
                 data-endpoint-type="getThreadComments"
                 data-maxim-requests="@(Model.Replies.TotalPages)"
                 data-request-index="@Model.Replies.PageIndex"
                 class="c-button js-loadmore u-no-js-hidden">
                  Load more posts
              </a>
          }


      </div>
  </div>
  */}